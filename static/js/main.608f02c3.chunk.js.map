{"version":3,"sources":["components/Cell.js","components/CellNumber.js","components/Card.js","components/CardMenu.js","components/ProjectDescription.js","components/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Cell","className","children","CellNumber","cell","cellUpdated","selected","edit","free","onChange","e","val","target","value","onClick","title","Card","onCellUpdated","numbers","map","content","idx","key","CardMenu","toggleEditMode","editModeActive","cleanSelection","cleanAll","ProjectDescription","generateCells","c","index","range","getStorage","SESSION_KEY","JSON","parse","sessionStorage","getItem","saveStorage","oldStore","setItem","stringify","loadFromStore","store","App","useState","prop","setNumbers","setEditModeActive","nextEditMode","newNumbers","newCell","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.608f02c3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = ({ className, children }) => {\n  return (\n    <div className={`cell border-solid border-4 p-4 text-4xl font-bold ${className}`}>\n      { children }\n    </div>\n  )\n}\n\nexport default Cell\n","import React from 'react';\nimport Cell from './Cell'\n\nconst CellNumber = ({ className, cell, cellUpdated }) => {\n  const onChangeCell = (val) => {\n    cellUpdated({\n      ...cell,\n      value: val\n    })\n  }\n\n  const selectedNumber = () => {\n    cellUpdated({\n      ...cell,\n      selected: !cell.selected\n    })\n  }\n\n  const selectClass = () => cell.selected && !cell.edit ? 'cell-selected' : '';\n  const freeCellClass = () => cell.free ? 'bg-gray-400' : 'bg-white';\n\n  return (\n    <Cell\n      className={`cell-number ${selectClass()} ${freeCellClass()} ${className}`}>\n      <div className={`cell-number-content flex items-center justify-center`}>\n        {\n          cell.edit && !cell.free ?\n            <input\n              className={`text-4xl w-full text-center`} onChange={e => onChangeCell(e.target.value)}\n              value={cell.value}\n            /> :\n            <span>{ cell.value }</span>\n        }\n        {\n          cell.free ? <div>\n            <p className=\"text-sm p-2\">Espacio Libre</p>\n          </div> : ''\n        }\n      </div>\n      {\n        !cell.edit && cell.value ?\n          <button\n            className={`bg-red-300 hover:bg-red-400 rounded-full inline-flex items-center w-5 h-5 cell-select-button`}\n            onClick={selectedNumber}\n            title={`${cell.selected ? 'Desmarcar': 'Marcar'}`}\n          >\n          </button>\n          : ''\n      }\n    </Cell>\n  )\n}\n\nexport default CellNumber\n","import React from 'react';\nimport Cell from './Cell';\nimport CellNumber from './CellNumber';\nimport { map } from 'ramda';\n\nconst Card = ({ className, onCellUpdated, numbers }) => {\n  const title = ['B', 'I', 'N', 'G', 'O'];\n\n  return (\n    <div className={`card ${ className }`}>\n      <div className={`flex flex-wrap`}>\n        {\n          map(\n            (content, idx) =>  <Cell className=\"w-1/5 text-center card-header\" key={idx}>\n              <span className=\"text-white\">{ content }</span>\n            </Cell>,\n            title\n          )\n        }\n        {\n          map(\n            (cell, idx) =>  <CellNumber\n              className=\"w-1/5 text-center\"\n              cell={cell}\n              cellUpdated={onCellUpdated}\n              key={idx}\n            />,\n            numbers\n          )\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react';\n\nconst CardMenu = ({ toggleEditMode, editModeActive, cleanSelection, cleanAll }) => {\n  return (\n    <div>\n      <button\n        className={`bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center mr-2 mb-2`}\n        onClick={() => toggleEditMode()}\n      >\n        { editModeActive ? 'Cancelar Edición' : 'Editar Cartilla' }\n      </button>\n      <button\n        className={`bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center mr-2 mb-2`}\n        onClick={() => cleanSelection()}\n      >\n        Limpiar Selección\n      </button>\n      <button\n        className={`bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center  mb-2`}\n        onClick={() => cleanAll()}\n      >\n        Limpiar Todo\n      </button>\n    </div>\n  )\n}\n\nexport default CardMenu\n","import React from 'react';\n\nconst ProjectDescription = ({ className }) => {\n  return (\n    <div className={`${className}`}>\n      <h1 className=\"text-4xl font-bold\">Cartilla de BINGO</h1>\n      <p className=\"mb-4\">Ahora puede jugar BINGO de manera virtual, llene la cartilla con sus números asignados, puede seleccionar los números en la cartilla y revisar si es el ganador.</p>\n      <div className=\"pl-6\">\n        <ul className=\"list-disc \">\n          <li><strong>Editar Cartilla:</strong> Activa el modo edición para que usted pueda cambiar el valor de los números.</li>\n          <li><strong>Limpiar Selección:</strong> Elimina la selección de todos los números.</li>\n          <li><strong>Limpiar Todo:</strong> Elimina todos los números, incluida su selección.</li>\n          <li><button\n            className={`bg-red-300 hover:bg-red-400 rounded-full inline-flex items-center w-5 h-5`}>\n          </button> Presiona el botón rojo para seleccionar el número.</li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectDescription;\n","import { map, range } from 'ramda'\n\nexport const generateCells = () => map(\n  (c) => ({\n    index: c,\n    edit: false,\n    value: '',\n    selected: false,\n    free: c === 12\n  }),\n  range(0, 25)\n)\n\nexport const getStorage = (SESSION_KEY) => JSON.parse(sessionStorage.getItem(SESSION_KEY));\nexport const saveStorage = (content, SESSION_KEY) => {\n  const oldStore = getStorage() || {};\n  sessionStorage.setItem(SESSION_KEY, JSON.stringify({...oldStore, ...content}));\n}\n\nexport const loadFromStore = (SESSION_KEY) => {\n  const store = getStorage(SESSION_KEY);\n  return store === null ? {\n    numbers: generateCells(),\n    editModeActive: false\n  } : store;\n};\n","import React, { useState } from 'react'\nimport Card from './components/Card'\nimport CardMenu from './components/CardMenu'\nimport ProjectDescription from './components/ProjectDescription'\nimport { map, prop } from 'ramda'\nimport { saveStorage, loadFromStore, generateCells } from './components/helpers';\n\nconst SESSION_KEY = 'bingo-filler';\n\nconst App = () => {\n  const [numbers, setNumbers] = useState(prop('numbers', loadFromStore(SESSION_KEY)));\n  const [editModeActive, setEditModeActive] = useState(prop('editModeActive', loadFromStore(SESSION_KEY)));\n\n  const toggleEditMode = () => {\n    const nextEditMode = !editModeActive;\n    const newNumbers = map((cell) => ({...cell, edit: nextEditMode}), numbers);\n    setNumbers(newNumbers)\n    setEditModeActive(nextEditMode);\n    saveStorage({numbers: newNumbers, editModeActive: nextEditMode}, SESSION_KEY);\n  }\n\n  const onCellUpdated = newCell => {\n    const newNumbers = [...numbers];\n    newNumbers[newCell.index] = newCell;\n    setNumbers(newNumbers);\n    saveStorage({ numbers:newNumbers }, SESSION_KEY);\n  }\n  const onCleanSelection = () => {\n    const newNumbers = map((cell) => ({...cell, selected: false}), numbers);\n    setNumbers(newNumbers)\n    saveStorage({numbers: newNumbers}, SESSION_KEY);\n  }\n  const onCleanAll = () => {\n    const newNumbers = generateCells();\n    setNumbers(newNumbers)\n    saveStorage({numbers: newNumbers}, SESSION_KEY);\n  }\n\n  return (\n    <div className=\"flex flex-wrap bg-gray-100\">\n      <div className=\"w-full md:w-1/2 p-6\">\n        <ProjectDescription className={`mb-8`} />\n        <CardMenu\n          toggleEditMode={toggleEditMode} editModeActive={editModeActive}\n          cleanSelection={onCleanSelection}\n          cleanAll={onCleanAll}\n        />\n      </div>\n      <div className=\"w-full md:w-1/2 flex flex-justify-center items-center pt-6 pb-6\">\n        <Card className=\"w-4/5 mx-auto\" onCellUpdated={onCellUpdated} numbers={numbers} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}